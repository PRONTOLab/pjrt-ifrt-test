cc_binary(
    name = "demo-pjrt",
    srcs = ["demo-pjrt.cpp"],
    copts = [
        "-Werror=unused-variable",
        "-Werror=unused-but-set-variable",
        "-Werror=return-type",
        "-Werror=unused-result",
        "-Wno-error=stringop-truncation",
    ],
    linkstatic = True,
    tags = [
        "demo",
    ],
    deps = [
        # "@enzyme//:EnzymeMLIR",
        # "@llvm-project//mlir:AffineDialect",
        "@llvm-project//mlir:AllPassesAndDialects",
        "@llvm-project//mlir:ArithDialect",
        # "@llvm-project//mlir:AsyncDialect",
        # "@llvm-project//mlir:ComplexDialect",
        # "@llvm-project//mlir:ControlFlowDialect",
        "@llvm-project//mlir:ConversionPasses",
        # "@llvm-project//mlir:DLTIDialect",
        "@llvm-project//mlir:FuncDialect",
        # "@llvm-project//mlir:FromLLVMIRTranslation",
        # "@llvm-project//mlir:GPUDialect",
        # "@llvm-project//mlir:LinalgDialect",
        # "@llvm-project//mlir:LLVMDialect",
        # "@llvm-project//mlir:MathDialect",
        # "@llvm-project//mlir:MemRefDialect",
        # "@llvm-project//mlir:MlirOptLib",
        # "@llvm-project//mlir:NVVMDialect",
        "@llvm-project//mlir:Pass",
        # "@llvm-project//mlir:SCFDialect",
        # "@llvm-project//mlir:TransformDialect",
        # "@llvm-project//mlir:Transforms",
        # "@llvm-project//mlir:LLVMIRToLLVMTranslation",
        # "@llvm-project//mlir:LLVMIRToNVVMTranslation",
        # "@llvm-project//mlir:LLVMIRTransforms",
        "@llvm-project//llvm:IRReader",
        "@llvm-project//llvm:Support",
        "@llvm-project//llvm:AArch64AsmParser",
        "@llvm-project//llvm:AArch64CodeGen",
        "@llvm-project//llvm:X86AsmParser",
        "@llvm-project//llvm:X86CodeGen",
        # "@enzyme_ad//src/enzyme_ad/jax:TransformOps",
        # "@enzyme_ad//src/enzyme_ad/jax:XLADerivatives",
        # "@enzyme_ad//src/enzyme_ad/jax:gpu",
        "@xla//xla/ffi/api:ffi",
        "@xla//xla/ffi:ffi_api",
        "@stablehlo//:chlo_ops",
        "@xla//xla/pjrt:pjrt_api",
        "@xla//xla/pjrt:pjrt_c_api_client",
        "@xla//xla/pjrt/cpu:cpu_client",
        "@xla//xla:xla_proto_cc",
        "@xla//xla:xla_proto_cc_impl",
        "@xla//xla/service/cpu:cpu_compiler",
        "@xla//xla/service/cpu:cpu_transfer_manager",
        # "@xla//xla/pjrt/gpu:se_gpu_pjrt_client",
        # "@xla//xla/tsl/protobuf:protos_all_cc_impl",
        "@xla//xla/tsl/framework:allocator_registry_impl",
        "@xla//xla/pjrt:status_casters",
        "@xla//xla/ffi:call_frame",
        # "@com_google_protobuf//:protobuf",
        # "@tsl//tsl/profiler/protobuf:profiler_service_monitor_result_proto_cc_impl",
        # "@tsl//tsl/profiler/protobuf:profiler_service_proto_cc_impl",
        # "@tsl//tsl/profiler/protobuf:profiler_analysis_proto_cc_impl",
        # "@tsl//tsl/profiler/protobuf:profiler_options_proto_cc_impl",
        # "@tsl//tsl/profiler/protobuf:profile_proto_cc_impl",
        # "@tsl//tsl/profiler/protobuf:xplane_proto_cc_impl",
        # "@tsl//tsl/profiler/protobuf:trace_events_proto_cc_impl",
        # "@xla//xla/backends/profiler/cpu:host_tracer",
        # "@xla//xla/backends/profiler/cpu:host_tracer_impl",
        # "@xla//xla/backends/profiler/cpu:metadata_collector",
        # "@xla//xla/backends/profiler/cpu:metadata_utils",
        "@tsl//tsl/platform:env_impl",
        "@xla//xla/stream_executor:stream_executor_impl",
        "@xla//xla/mlir/utils:type_util",
        "@stablehlo//:stablehlo_capi_objects",
        "@stablehlo//:chlo_capi_objects",
        # "@com_google_absl//absl/hash",
        # "@com_google_absl//absl/log:initialize",
        # "@com_google_absl//absl/log:globals",
        "@com_google_absl//absl/types:span",
        "@com_google_absl//absl/status:statusor",
        "@llvm-project//mlir:CAPIIRObjects",
        "@llvm-project//mlir:CAPILLVMObjects",
        # "@jax//jaxlib/mosaic:tpu_dialect_capi_objects",
        # "@jax//jaxlib/triton:triton_dialect_capi_objects",
    ],
)
